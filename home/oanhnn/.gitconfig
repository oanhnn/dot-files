[user]
  email = oanhnn.bk@gmail.com
  name = Oanh Nguyen
  signingkey = 23A3227475B1A5B0

[core]
  ignorecase = false
  autocrlf = true

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

[color]
  ui = true
  branch = auto
  diff = auto
  status = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = cyan

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[credential]
  helper = cache --timeout=3600

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[commit]
  # https://help.github.com/articles/signing-commits-using-gpg/
  #$ gpg --import public.key
  #$ gpg --allow-secret-key-import --import secret.key
  gpgsign = true

[push]
  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = matching
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[filter "lfs"]
  process = git-lfs filter-process
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f

[alias]
  # List aliases
  aliases = config --get-regexp alias

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # list file with permission index
  lsmod = ls-files -s

  # Add or remove execute permission of file (+x or -x)
  chmod = "!f() { git update-index --chmod=$1 $2; }; f"

  # Undo
  undo = reset --soft HEAD~
  unstage = reset HEAD --
  staged = diff --staged

  # Create and remove remote branch
  publish = "!f() { git push -u origin \"$(git rev-parse --abbrev-ref HEAD)\"; }; f"
  unpublish = "!f() { git push --delete origin \"$(git rev-parse --abbrev-ref HEAD)\"; }; f"

  # View abbreviated SHA, description, and history graph of the latest commits
  lg = log --graph --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"f() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; f"

  # Pull in remote changes for the current repository and all its submodules
  pr = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  cr = clone --recursive

  co = checkout
  br = branch

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Interactive rebase with the given number of latest commits
  rbase = "!f() { git rebase -i HEAD~$1; }; f"

  # Remove the old tag with this name and tag the latest commit with it.
  rtag = "!f() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; f"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { \
    git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; \
  }; f"

  # Find commits by commit message
  fm = "!f() { \
    git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; \
  }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  rmb = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch
  mpr = "!f() { \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
    git fetch origin refs/pull/$1/head:pr/$1 && \
    git checkout -B $branch && \
    git rebase $branch pr/$1 && \
    git checkout -B $branch && \
    git merge pr/$1 && \
    git branch -D pr/$1 && \
    git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"
